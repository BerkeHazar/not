name: Update Traffic Stats

on:
  schedule:
    # Her gün UTC 00:00'da çalışır (Türkiye saatiyle 03:00 kış saati)
    - cron: '0 0 * * *'
  workflow_dispatch: # Manuel tetikleme için

jobs:
  update-traffic:
    runs-on: ubuntu-latest

    steps:
      # Node.js ortamını kur (Node 20, fetch API yerleşik)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Inline JavaScript kodunu çalıştır
      - name: Run traffic update script
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          node -e '
            async function fetchRepoData(token) {
              const response = await fetch("https://api.github.com/repos/orayemre/Notemod", {
                method: "GET",
                headers: {
                  "Authorization": `token ${token}`,
                  "Accept": "application/vnd.github.v3+json",
                },
              });
              if (!response.ok) throw new Error(`Repo fetch error: ${response.status}`);
              return response.json();
            }

            async function fetchTrafficData(token) {
              const response = await fetch("https://api.github.com/repos/orayemre/Notemod/traffic/views", {
                method: "GET",
                headers: {
                  "Authorization": `token ${token}`,
                  "Accept": "application/vnd.github.v3+json",
                },
              });
              if (!response.ok) throw new Error(`Traffic fetch error: ${response.status}`);
              const data = await response.json();
              return data.views;
            }

            async function fetchGistData(gistId, dosyaAdi, filetoken) {
              try {
                const response = await fetch(`https://api.github.com/gists/${gistId}`, {
                  method: "GET",
                  headers: {
                    "Authorization": `Bearer ${filetoken}`,
                    "Accept": "application/vnd.github.v3+json",
                  },
                });
                if (!response.ok) throw new Error(`Gist fetch error: ${response.status}`);
                const data = await response.json();
                const dosya = data.files[dosyaAdi];
                if (!dosya || !dosya.content) {
                  return { total: 0, lastUpdate: "1970-01-01" };
                }
                return JSON.parse(dosya.content);
              } catch (error) {
                console.error("Gist çekme hatası:", error);
                return { total: 0, lastUpdate: "1970-01-01" };
              }
            }

            async function gistGuncelle(gistId, dosyaAdi, yeniIcerik, filetoken) {
              try {
                const response = await fetch(`https://api.github.com/gists/${gistId}`, {
                  method: "PATCH",
                  headers: {
                    "Authorization": `Bearer ${filetoken}`,
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    files: {
                      [dosyaAdi]: {
                        content: yeniIcerik,
                      },
                    },
                  }),
                });
                if (!response.ok) {
                  const data = await response.json();
                  throw new Error(`Gist güncelleme hatası: ${data.message}`);
                }
                console.log("Gist başarıyla güncellendi.");
              } catch (error) {
                console.error("Gist güncelleme hatası:", error);
              }
            }

            async function updateTotalVisitors(trafficData, gistId, dosyaAdi, filetoken) {
              const gistData = await fetchGistData(gistId, dosyaAdi, filetoken);
              let currentTotal = gistData.total || 0;
              let lastUpdate = gistData.lastUpdate || "1970-01-01";
              const sortedTrafficData = trafficData.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
              const newDays = sortedTrafficData.filter(item => new Date(item.timestamp) > new Date(lastUpdate));
              const newUniques = newDays.reduce((sum, item) => sum + item.uniques, 0);
              const newTotal = currentTotal + newUniques;
              const newLastUpdate = sortedTrafficData.length > 0 ? sortedTrafficData[sortedTrafficData.length - 1].timestamp : lastUpdate;
              const newGistContent = JSON.stringify({ total: newTotal, lastUpdate: newLastUpdate });
              await gistGuncelle(gistId, dosyaAdi, newGistContent, filetoken);
            }

            (async () => {
              const token = process.env.GH_TOKEN;
              const gistToken = process.env.GIST_TOKEN;
              const gistId = "ec631e4bb9e05b66357";
              const dosyaAdi = "GithubZiyaret";

              if (!token || !gistToken) {
                console.error("Token eksik. Lütfen GH_TOKEN ve GIST_TOKEN environment variable’larını ayarlayın.");
                process.exit(1);
              }

              try {
                const trafficData = await fetchTrafficData(token);
                await updateTotalVisitors(trafficData, gistId, dosyaAdi, gistToken);
                console.log("Traffic stats güncellendi.");
              } catch (error) {
                console.error("Hata oluştu:", error);
                process.exit(1);
              }
            })();
          '
